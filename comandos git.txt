git status -> verificar status de arquivos e controle de versões

git add "nome do arquivo" -> adicionar um arquivo específico pelo nome ao controle de versões

git add . -> adicionar todos os arquivos da pasta em um único comando

git commit -m "Especificar alterações realizadas" -> realizar um commit e especificar todas as alterações feitas no arquivo durante o commit

git config --global user.email "seu e-mail" -|
					     | -> Realizar configurações de e-mail e nome para a versão
git config --global user.name "seu nome"    -|

git remote add origin https://github.com/leandro-cesar-carvalho/aulas-git -> Definir o caminho para onde os códigos serão enviados

git push --set-upstream origin master -> Envia os arquivos para a versão master do repositório

git push -> insere no repositório

git reflog -> Mostra todo os históricos de versões até o momento, no qual a versão no topo é a mais recente

git reset --hard id -> reseta a versão master para a versão do commit do id especificado

git branch -> Verifica todas as branchs disponíveis no momento

git branch teste1 -> Cria uma branch com o nome informado

git checkout teste1 -> Define a branch como selecionada no momento

git pull -> Traz atualizações da branch com o código mais recente para a máquina local (boa prática antes de realizar um merge na branch master)

git merge teste1 -> após realizar o comando checkout para voltar na branch master, utilizar o comando merge para mesclar as alterações na branch teste1 dentro da branch master

Processo a ser seguido no uso de Branchs
1. Git Pull na branch principal
2. Gerar uma nova branch a partir da branch Master
3. Trabalhar e adicionar funcionalidades na branch paralela que foi criada
4. Finalizar funcionalidade na branch
5. Git Merge após selecionar branch Master para juntar branch o código da branch paralela
6. Git Push da Branch Master para finalizar

touch .gitignore -> irá criar um arquivo .gitignore para adicionar pastas e arquivos que devem ser ocultos